---
title: "organized name cleaning"
format: html
editor_options: 
  chunk_output_type: console
---

load libraries
```{r}
library(tidyverse)
library(here)
library(janitor)
```

load in data
```{r}
historical <- read_csv(here("data", "historical_production_delivery.csv"))
actual_shortage <- read_csv(here("data", "actual_water_shortage_level.csv"))
fiveyr_shortage <- read_csv(here("data", "five_year_water_shortage_outlook.csv"))
monthly_shortage <- read_csv(here("data", "monthly_water_shortage_outlook.csv"))
```

clean historical dataset
```{r}
historical_clean <- historical |> 
  mutate(supplier_name = water_system_name) |> 
  mutate(supplier_name = str_replace(water_system_name, "([a-zA-Z\\s]+)\\s+city\\+of", "city of \\1"),
         supplier_name = str_replace(supplier_name, "(?i)([a-z\\s]+?)\\s+town\\s+of", "town of \\1"),
    supplier_name = str_remove(supplier_name, regex("\\s*\\(\\s*ventura\\s*\\)", ignore_case = TRUE)),  
    supplier_name = str_replace(water_system_name, "wd", "water department"),
    supplier_name = str_replace(water_system_name, "water dept.", "water department"),
   supplier_name = if_else(
      str_to_lower(supplier_name) == "california water service co. - dixon",
      "california water service company dixon",
      supplier_name
    ),
    supplier_name = str_squish(supplier_name), 
  supplier_name = str_to_title(supplier_name)) 
```

clean five year shortage dataset
```{r}
fiveyr_clean <- fiveyr_shortage %>%
  mutate(
    supplier_name = str_replace_all(supplier_name, "(?i)\\s+", " "),             # normalize all whitespace
    supplier_name = str_trim(supplier_name),                                     # trim leading/trailing spaces
    supplier_name = str_replace(supplier_name, "(?i)([a-z\\s]+?)\\s+city\\s+of", "city of \\1"),
    supplier_name = str_replace(supplier_name, "(?i)([a-z\\s]+?)\\s+town\\s+of", "town of \\1"),
    supplier_name = str_remove(supplier_name, regex("\\s*\\(\\s*ventura\\s*\\)", ignore_case = TRUE)),  # flexible (Ventura)
    supplier_name = if_else(
      str_to_lower(supplier_name) == "california water service company dixon, city of",
      "california water service company dixon",
      supplier_name
    ),
    supplier_name = str_squish(supplier_name),                                   # remove extra internal spacing
    supplier_name = str_to_title(supplier_name)                                  # convert to title case
  )
```

clean monthly shortage dataset
```{r}

monthly_clean <- monthly_shortage %>%
  mutate(
    supplier_name = str_replace_all(supplier_name, "(?i)\\s+", " "),
    supplier_name = str_trim(supplier_name), # trim leading/trailing spaces
    supplier_name = str_replace(supplier_name, "(?i)([a-z\\s]+?)\\s+city\\s+of", "city of \\1"),
    supplier_name = str_replace(supplier_name, "(?i)([a-z\\s]+?)\\s+town\\s+of", "town of \\1"),
     supplier_name = str_remove(supplier_name, "\\(ventura\\)"),
    supplier_name = if_else(
      str_to_lower(supplier_name) == "california water service company dixon, city of",
      "california water service company dixon",
      supplier_name
    ),
    supplier_name = str_squish(supplier_name),  
    supplier_name = str_to_title(supplier_name)
  )
```

clean actual shortage dataset
```{r}
actual_clean <- actual_shortage %>%
  mutate(
    supplier_name = str_replace_all(supplier_name, "(?i)\\s+", " "), # normalize all whitespace to single space
    supplier_name = str_trim(supplier_name), # trim leading/trailing spaces
    supplier_name = str_replace(supplier_name, "(?i)([a-z\\s]+?)\\s+city\\s+of", "city of \\1"),
    supplier_name = str_replace(supplier_name, "(?i)([a-z\\s]+?)\\s+town\\s+of", "town of \\1"),
    supplier_name = str_remove(supplier_name, "\\(ventura\\)"),
    supplier_name = if_else(
      str_to_lower(supplier_name) == "california water service company dixon, city of",
      "california water service company dixon",
      supplier_name
    ),
    supplier_name = str_squish(supplier_name),  
    supplier_name = str_to_title(supplier_name)
  )
```

```{r}
clean_supplier_name <- function(data, col_name, new_col_name = "supplier_name") {
  col_sym <- rlang::sym(col_name)
  new_col_sym <- rlang::sym(new_col_name)

  data %>%
    mutate(
      !!new_col_sym := !!col_sym,
      # Clean whitespace and remove punctuation
      !!new_col_sym := str_squish(!!new_col_sym),
      !!new_col_sym := str_replace_all(!!new_col_sym, "(?i)\\s+", " "),
      !!new_col_sym := str_trim(!!new_col_sym),

      # Add space after hyphen or slash if missing
      !!new_col_sym := str_replace_all(!!new_col_sym, "([a-zA-Z])[-/]([a-zA-Z])", "\\1 - \\2"),

      # Remove unmatched closing parentheses
      !!new_col_sym := str_replace_all(!!new_col_sym, "\\)(?!.*\\()", ""),

      # Fix utility + region (Cal Am / Golden State)
      !!new_col_sym := str_replace(!!new_col_sym, "(?i)^(cal am water company|golden state water company)\\s+(\\S.*)$", "\\1 - \\2"),


      # Fix "mutual water co." â†’ "mutual water company"
      !!new_col_sym := str_replace_all(!!new_col_sym, "(?i)mutual water co\\.?$", "mutual water company"),

      # Move "City of" to the front if it appears after second word (comma ok), and remove comma
      !!new_col_sym := case_when(
        str_detect(!!new_col_sym, "(?i)^\\S+,?\\s+\\S+\\s+.*city of.*") ~ {
          match <- str_match(!!new_col_sym, "(?i)(.*)\\bcity of\\b(.*)")
          before <- str_remove_all(str_squish(match[,2]), ",")
          after <- str_remove_all(str_squish(match[,3]), ",")
          str_squish(paste("City Of", after, before))
        },
        TRUE ~ !!new_col_sym
      ),

      # Handle names ending in "city of"
      !!new_col_sym := case_when(
        str_detect(!!new_col_sym, "(?i)(.+)\\s+city\\s+of\\s*$") ~ {
          prefix <- str_extract(!!new_col_sym, "(?i)(.+)(?=\\s+city\\s+of\\s*$)")
          paste0("City Of ", prefix)
        },
        TRUE ~ !!new_col_sym
      ),

      # Reformat other known patterns
      !!new_col_sym := str_replace(!!new_col_sym, "(?i)([a-z\\s]+?)\\s+city\\s+of", "city of \\1"),
      !!new_col_sym := str_replace(!!new_col_sym, "(?i)([a-z\\s]+?)\\s+- city\\s+of", "city of \\1"),
      !!new_col_sym := str_replace(!!new_col_sym, "(?i)([a-z\\s]+?)\\s+town\\s+of", "town of \\1"),
      !!new_col_sym := str_replace(!!new_col_sym, "(\\b[a-z]+) city water dept\\.?$", "city of \\1 water department"),
      !!new_col_sym := str_replace(!!new_col_sym, "(\\b[a-z]+) water dept\\.?$", "city of \\1 water department"),
      !!new_col_sym := str_replace(!!new_col_sym, "dept\\.?\\b", "department"),
      !!new_col_sym := str_replace(!!new_col_sym, "folsom, city of", "city of folsom"),
      !!new_col_sym := str_remove(!!new_col_sym, ",\\s*$"),
      !!new_col_sym := str_remove(!!new_col_sym, "-\\s*$"),
      !!new_col_sym := str_remove(!!new_col_sym, "[,\\.-]+\\s*$"),
      !!new_col_sym := str_remove(!!new_col_sym, "(mwdoc)"),
      !!new_col_sym := str_replace(!!new_col_sym, "port hueneme city water dept", "city of port hueneme water department"),
      !!new_col_sym := str_replace(!!new_col_sym, "hawthorne-city of city water department", "city of hawthorne water department"),
      !!new_col_sym := str_replace(!!new_col_sym, "morrow bay pw department- ", "morrow bay public works department"),
      !!new_col_sym := str_replace(!!new_col_sym, "city of newman-water department", "city of newman water department"),
      !!new_col_sym := str_replace(!!new_col_sym, "pud", "public utility district"),
      !!new_col_sym := str_replace(!!new_col_sym, "wc", "water company"),
      !!new_col_sym := str_replace(!!new_col_sym, "wd", "water district"),
      !!new_col_sym := str_replace(!!new_col_sym, "w.d.", "water district"),
      !!new_col_sym := str_replace(!!new_col_sym, "w.a.", "water agency"),
      !!new_col_sym := str_replace(!!new_col_sym, "agencyd", "agency"),
      !!new_col_sym := str_replace(!!new_col_sym, "company.", "company"),
      !!new_col_sym := str_replace(!!new_col_sym, "pw", "public works"),
      !!new_col_sym := str_replace(!!new_col_sym, "corp\\.?\\b", "corporation"),
      !!new_col_sym := str_replace(!!new_col_sym, "tud", "tuolumne utilities district"),
      !!new_col_sym := str_replace(!!new_col_sym, "mwc", "mutual water company"),
      !!new_col_sym := str_replace(!!new_col_sym, "scwa", "sacramento county water agency"),
      !!new_col_sym := str_replace(!!new_col_sym, "maintence", "maintenance"),
      !!new_col_sym := str_replace(!!new_col_sym, " cwa", " county water agency"),
      !!new_col_sym := str_replace(!!new_col_sym, "csd", "community services district"),
      !!new_col_sym := str_replace(!!new_col_sym, "san dima", "- san dima"),
      !!new_col_sym := str_replace(!!new_col_sym, "\\bsd\\b", "services district"),

      # Fix Bell/Bell Gardens
      !!new_col_sym := str_replace_all(
        !!new_col_sym,
        regex("bell, bell gardens|bell-bell gardens", ignore_case = TRUE),
        "bell/bell gardens"
      ),

      !!new_col_sym := str_replace_all(
        !!new_col_sym,
        regex("\\bCo\\.?\\b", ignore_case = TRUE),
        "Company"
      ),

      !!new_col_sym := str_replace_all(
        !!new_col_sym,
        regex("\\bdiv\\.?\\b|\\bdivis(?:io)?n?\\b", ignore_case = TRUE),
        "division"
      ),

      !!new_col_sym := str_replace_all(
        !!new_col_sym,
        regex("\\bdist\\.?\\b", ignore_case = TRUE),
        "district"
      ),

      # Remove location tags like (ventura)
      !!new_col_sym := str_remove(!!new_col_sym, regex("\\(\\s*ventura\\s*\\)", ignore_case = TRUE)),

      # Special known names
      !!new_col_sym := case_when(
        str_to_lower(!!new_col_sym) %in% c(
          "california water service co. - dixon",
          "california water service company dixon, city of"
        ) ~ "california water service company dixon",
        TRUE ~ !!new_col_sym
      ),

      !!new_col_sym := case_when(
        str_to_lower(!!new_col_sym) %in% c(
          "Great Oaks Water Companyin",
          "great oaks wc inc"
        ) ~ "great oaks water company inc",
        TRUE ~ !!new_col_sym
      ),

      !!new_col_sym := case_when(
        str_to_lower(!!new_col_sym) %in% c(
          "city of thousand oaks",
          "thousand oaks water dept",
          "	thousand oaks  city of",
          "Thousand City Of Oaks Water Department",
          "thousand city of oaks water department",
          "thousand oaks city of"
        ) ~ "city of thousand oaks water department",
        TRUE ~ !!new_col_sym
      ),

      !!new_col_sym := case_when(
        str_to_lower(!!new_col_sym) %in% c(
          "port hueneme city water dept",
          "Port City Of Hueneme Water Department",
          "city of port hueneme water department",
          "port city of hueneme water department"
        ) ~ "city of port hueneme water department",
        TRUE ~ !!new_col_sym
      ),

      !!new_col_sym := case_when(
        str_to_lower(!!new_col_sym) %in% c(
          "city of chowchilla",
          "chowcilla, city of",
          "chowchilla, city of water department"
        ) ~ "city of chowchilla water department",
        TRUE ~ !!new_col_sym
      ),

      !!new_col_sym := str_replace_all(
        !!new_col_sym,
        regex("\\bgolden state wc\\b|\\bgswc\\b|\\bgolden state water co\\.?\\b|\\bgswater company\\b", ignore_case = TRUE),
        "golden state water company"
      ),

      !!new_col_sym := str_replace_all(
        !!new_col_sym,
        regex("\\bcal/am\\b|\\bcal am\\b|\\bcal american water co\\.?\\b|\\bcal american wc\\b|\\bcal-am water company\\b", ignore_case = TRUE),
        "cal am water company"
      ),

      !!new_col_sym := case_when(
        str_detect(!!new_col_sym, "(?i)^(.+)-\\s*city,?\\s*water department\\s*$") ~ {
          match <- str_match(!!new_col_sym, "(?i)^(.+?)-\\s*city,?\\s*water department\\s*$")
          supplier <- str_to_title(str_squish(match[,2]))
          paste("City Of", supplier, "Water Department")
        },
        TRUE ~ !!new_col_sym
      ),

      # Replace only isolated "id" with "irrigation district"
      !!new_col_sym := str_replace_all(
        !!new_col_sym,
        regex("^id$", ignore_case = TRUE),
        "irrigation district"
      ),

      # Prevent double replacements
      !!new_col_sym := str_replace_all(
        !!new_col_sym,
        regex("water company\\s+water company", ignore_case = TRUE),
        "water company"
      ),

      # Final cleanup
      !!new_col_sym := str_squish(!!new_col_sym),
      !!new_col_sym := str_to_title(!!new_col_sym),
      
       # Preserve KOA acronym
      !!new_col_sym := str_replace_all(!!new_col_sym, "\\bKoa\\b", "KOA")

    )
}


```


```{r}
historical_clean <- clean_supplier_name(historical, "water_system_name")
fiveyr_clean <- clean_supplier_name(fiveyr_shortage, "supplier_name")
monthly_clean <- clean_supplier_name(monthly_shortage, "supplier_name")
actual_clean <- clean_supplier_name(actual_shortage, "supplier_name")

```

```{r}

supplier_table <- bind_rows(
  historical_clean %>% select(org_id, supplier_name),
  fiveyr_clean %>% select(org_id, supplier_name),
  monthly_clean %>% select(org_id, supplier_name),
  actual_clean %>% select(org_id, supplier_name)
) %>%
  distinct()  # remove any duplicate rows

```

```{r}
write.csv(supplier_table,"supplier_table.csv", row.names = FALSE)
```

```{r}
# Create a single column with name and org_id combined
supplier_export <- supplier_table %>%
  mutate(name_with_id = paste(supplier_name, "-", org_id)) %>%
  select(name_with_id)

# Write to CSV
write_csv(supplier_export, "supplier_names_with_org_ids.csv")
```




